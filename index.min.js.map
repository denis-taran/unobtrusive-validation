{"version":3,"file":"index.min.js","sources":["index.ts"],"sourcesContent":[" /*\r\n  * https://github.com/kraaden/unobtrusive-validation\r\n  * Copyright (c) 2016 Denys Krasnoshchok\r\n  * MIT License\r\n  */\r\n\r\ninterface IFormElement extends HTMLElement {\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\nexport const validators: ((element: IFormElement) => boolean)[] = [];\r\n\r\nexport declare var failed_validation_handler: (e: Event) => void;\r\nexport declare var successful_validation_handler: (e: Event) => void;\r\n\r\nfunction getElementValue(element: IFormElement): string {\r\n    return element.value;\r\n}\r\n\r\nfunction findContainer(element: HTMLElement): HTMLSpanElement | null {\r\n    return document.querySelector(`span[data-valmsg-for='${element.getAttribute(\"name\")}']`) as HTMLSpanElement | null;\r\n}\r\n\r\nfunction isInt(value: string): boolean {\r\n    return !isNaN(value as any) && Number.isInteger(parseFloat(value));\r\n}\r\n\r\nfunction clearError(element: HTMLElement) {\r\n    const container = findContainer(element);\r\n    if (container) {\r\n        while (container.firstChild) {\r\n            const child = container.firstChild;\r\n            const parent = child.parentNode;\r\n            if (parent) {\r\n                parent.removeChild(child);\r\n            }\r\n        }\r\n        container.classList.add(\"data-validation-valid\");\r\n    }\r\n}\r\n\r\nfunction validateElement(element: IFormElement): boolean {\r\n    let success = true;\r\n    for (const validator of validators) {\r\n        success = success && validator(element);\r\n    }\r\n    if (success) {\r\n        clearError(element);\r\n    }\r\n    return success;\r\n}\r\n\r\nfunction showError(element: HTMLElement, message: string) {\r\n    clearError(element);\r\n    const container = findContainer(element);\r\n    if (container) {\r\n        container.textContent = message;\r\n        container.classList.add(\"field-validation-error\");\r\n    }\r\n}\r\n\r\nfunction requiredValidator(element: IFormElement): boolean {\r\n    const message = element.getAttribute(\"data-val-required\");\r\n    if (message) {\r\n        const val = getElementValue(element).trim();\r\n        if (!val) {\r\n            showError(element, message);\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction lengthValidator(element: IFormElement): boolean {\r\n    const errorMsg = element.getAttribute(\"data-val-length\");\r\n    const minlen = element.getAttribute(\"data-val-length-min\");\r\n    const maxlen = element.getAttribute(\"data-val-length-max\");\r\n    const value = getElementValue(element);\r\n    if (errorMsg && value) {\r\n        if (maxlen) {\r\n            const max = parseInt(maxlen, 10);\r\n            if (value.length > max) {\r\n                showError(element, errorMsg);\r\n                return false;\r\n            }\r\n        }\r\n        if (minlen) {\r\n            const min = parseInt(minlen, 10);\r\n            if (value.length < min) {\r\n                showError(element, errorMsg);\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction regexValidator(element: IFormElement): boolean {\r\n    const errorMsg = element.getAttribute(\"data-val-regex\");\r\n    const regexPattern = element.getAttribute(\"data-val-regex-pattern\");\r\n    const value = getElementValue(element);\r\n    if (errorMsg && regexPattern && value) {\r\n        if (!value.match(`^${regexPattern}$`)) {\r\n            showError(element, errorMsg);\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction rangeValidator(element: IFormElement): boolean {\r\n    const errorMsg = element.getAttribute(\"data-val-range\");\r\n    const minval = element.getAttribute(\"data-val-range-min\");\r\n    const maxval = element.getAttribute(\"data-val-range-max\");\r\n    const value = getElementValue(element);\r\n\r\n    if (errorMsg && isInt(value)) {\r\n        const number = parseInt(value, 10);\r\n        if (minval) {\r\n            const min = parseInt(minval, 10);\r\n            if (number < min) {\r\n                showError(element, errorMsg);\r\n                return false;\r\n            }\r\n        }\r\n        if (maxval) {\r\n            const max = parseInt(maxval, 10);\r\n            if (number > max) {\r\n                showError(element, errorMsg);\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction addChangeListener(element: HTMLElement) {\r\n    if (element.nodeName === \"TEXTAREA\") {\r\n        element.addEventListener(\"keyup\", () => {\r\n            validateElement(element as HTMLTextAreaElement);\r\n        });\r\n        return;\r\n    }\r\n    if (element.nodeName === \"INPUT\") {\r\n        const input = element as HTMLInputElement;\r\n        if (input.type === \"text\" || input.type === \"password\") {\r\n            input.addEventListener(\"keyup\", () => {\r\n                validateElement(input);\r\n            });\r\n            return;\r\n        }\r\n    }\r\n    if (element.nodeName === \"SELECT\") {\r\n        const select = element as HTMLSelectElement;\r\n        select.addEventListener(\"change\", () => {\r\n            validateElement(select);\r\n        });\r\n    }\r\n}\r\n\r\nfunction validateForm(form: HTMLFormElement): boolean {\r\n    let valid = true;\r\n    const submit = form.getAttribute(\"data-submitted\");\r\n    \r\n    if (!submit) {\r\n        form.setAttribute(\"data-submitted\", \"true\");\r\n    }\r\n\r\n    var inputs = form.querySelectorAll<HTMLInputElement>(\"input, textarea, select\");\r\n\r\n    [].forEach.call(inputs, function(input: HTMLInputElement) {\r\n        if (input.type === \"hidden\") {\r\n            return;\r\n        }\r\n        if (!submit) {\r\n            addChangeListener(input);\r\n        }\r\n        const current = validateElement(input);\r\n        valid = valid && current;\r\n    });\r\n    \r\n    return valid;\r\n}\r\n\r\nvalidators.push(requiredValidator);\r\nvalidators.push(lengthValidator);\r\nvalidators.push(regexValidator);\r\nvalidators.push(rangeValidator);\r\n\r\nwindow.addEventListener('DOMContentLoaded', function() {\r\n    var elements = document.querySelectorAll<HTMLFormElement>('form');\r\n\r\n    [].forEach.call(elements, function(form: HTMLFormElement) {\r\n        form.addEventListener(\"submit\", function(ev) {\r\n            if (!validateForm(form)) {\r\n                if (failed_validation_handler) {\r\n                    failed_validation_handler(ev);\r\n                }\r\n                ev.preventDefault();\r\n                return;\r\n            }\r\n\r\n            if (successful_validation_handler) {\r\n                successful_validation_handler(ev);\r\n            }\r\n\r\n            var buttons = form.querySelectorAll(\"button[data-prevent-double-submit]\");\r\n            [].forEach.call(buttons, function(button: HTMLButtonElement) {\r\n                button.setAttribute(\"disabled\", \"disabled\");\r\n            });\r\n        });\r\n    });\r\n});"],"names":["validators","getElementValue","element","value","findContainer","document","querySelector","getAttribute","clearError","container","firstChild","child","parent_1","parentNode","removeChild","classList","add","validateElement","success","validators_1","_i","validator","showError","message","textContent","validateForm","form","valid","submit","setAttribute","inputs","querySelectorAll","forEach","call","input","type","nodeName","input_1","addEventListener","select_1","addChangeListener","current","push","trim","errorMsg","minlen","maxlen","max","parseInt","length","min","regexPattern","match","minval","maxval","isNaN","Number","isInteger","parseFloat","isInt","number","window","elements","ev","failed_validation_handler","preventDefault","successful_validation_handler","buttons","button"],"mappings":"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"}