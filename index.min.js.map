{"version":3,"file":"index.min.js","sources":["index.ts"],"sourcesContent":[" /*\r\n  * https://github.com/kraaden/unobtrusive-validation\r\n  * Copyright (c) 2016 Denys Krasnoshchok\r\n  * MIT License\r\n  */\r\n\r\ninterface IFormElement extends HTMLElement {\r\n    value: string;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * List of handlers that will be executed after validation is finished for the submitted form.\r\n * You can use them to hide/show a spinner or do some additional work.\r\n */\r\nexport const form_validation_handlers: ((evt: Event, succeeded: boolean) => void)[] = [];\r\n\r\n/**\r\n * List of validators used by the library to validate form elements\r\n */\r\nexport const form_validators: ((element: IFormElement) => boolean)[] = [];\r\n\r\nfunction getElementValue(element: IFormElement): string {\r\n    return element.value;\r\n}\r\n\r\nfunction findContainer(element: HTMLElement): HTMLSpanElement | null {\r\n    return document.querySelector(`span[data-valmsg-for='${element.getAttribute(\"name\")}']`) as HTMLSpanElement | null;\r\n}\r\n\r\nfunction isInt(value: string): boolean {\r\n    return !isNaN(value as any) && Number.isInteger(parseFloat(value));\r\n}\r\n\r\nfunction clearError(element: HTMLElement) {\r\n    const container = findContainer(element);\r\n    if (container) {\r\n        while (container.firstChild) {\r\n            const child = container.firstChild;\r\n            const parent = child.parentNode;\r\n            if (parent) {\r\n                parent.removeChild(child);\r\n            }\r\n        }\r\n        container.classList.add(\"data-validation-valid\");\r\n    }\r\n}\r\n\r\nfunction validateElement(element: IFormElement): boolean {\r\n    let success = true;\r\n    for (const validator of form_validators) {\r\n        success = success && validator(element);\r\n    }\r\n    if (success) {\r\n        clearError(element);\r\n    }\r\n    return success;\r\n}\r\n\r\nfunction showError(element: HTMLElement, message: string) {\r\n    clearError(element);\r\n    const container = findContainer(element);\r\n    if (container) {\r\n        container.textContent = message;\r\n        container.classList.add(\"field-validation-error\");\r\n    }\r\n}\r\n\r\nfunction requiredValidator(element: IFormElement): boolean {\r\n    const message = element.getAttribute(\"data-val-required\");\r\n    if (message) {\r\n        const val = getElementValue(element).trim();\r\n        if (!val) {\r\n            showError(element, message);\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction lengthValidator(element: IFormElement): boolean {\r\n    const errorMsg = element.getAttribute(\"data-val-length\");\r\n    const minlen = element.getAttribute(\"data-val-length-min\");\r\n    const maxlen = element.getAttribute(\"data-val-length-max\");\r\n    const value = getElementValue(element);\r\n    if (errorMsg && value) {\r\n        if (maxlen) {\r\n            const max = parseInt(maxlen, 10);\r\n            if (value.length > max) {\r\n                showError(element, errorMsg);\r\n                return false;\r\n            }\r\n        }\r\n        if (minlen) {\r\n            const min = parseInt(minlen, 10);\r\n            if (value.length < min) {\r\n                showError(element, errorMsg);\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction regexValidator(element: IFormElement): boolean {\r\n    const errorMsg = element.getAttribute(\"data-val-regex\");\r\n    const regexPattern = element.getAttribute(\"data-val-regex-pattern\");\r\n    const value = getElementValue(element);\r\n    if (errorMsg && regexPattern && value) {\r\n        if (!value.match(`^${regexPattern}$`)) {\r\n            showError(element, errorMsg);\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction rangeValidator(element: IFormElement): boolean {\r\n    const errorMsg = element.getAttribute(\"data-val-range\");\r\n    const minval = element.getAttribute(\"data-val-range-min\");\r\n    const maxval = element.getAttribute(\"data-val-range-max\");\r\n    const value = getElementValue(element);\r\n\r\n    if (errorMsg && isInt(value)) {\r\n        const number = parseInt(value, 10);\r\n        if (minval) {\r\n            const min = parseInt(minval, 10);\r\n            if (number < min) {\r\n                showError(element, errorMsg);\r\n                return false;\r\n            }\r\n        }\r\n        if (maxval) {\r\n            const max = parseInt(maxval, 10);\r\n            if (number > max) {\r\n                showError(element, errorMsg);\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction addChangeListener(element: HTMLElement) {\r\n    if (element.nodeName === \"TEXTAREA\") {\r\n        element.addEventListener(\"keyup\", () => {\r\n            validateElement(element as HTMLTextAreaElement);\r\n        });\r\n        return;\r\n    }\r\n    if (element.nodeName === \"INPUT\") {\r\n        const input = element as HTMLInputElement;\r\n        if (input.type === \"text\" || input.type === \"password\") {\r\n            input.addEventListener(\"keyup\", () => {\r\n                validateElement(input);\r\n            });\r\n            return;\r\n        }\r\n    }\r\n    if (element.nodeName === \"SELECT\") {\r\n        const select = element as HTMLSelectElement;\r\n        select.addEventListener(\"change\", () => {\r\n            validateElement(select);\r\n        });\r\n    }\r\n}\r\n\r\nfunction validateForm(form: HTMLFormElement): boolean {\r\n    let valid = true;\r\n    const submit = form.getAttribute(\"data-submitted\");\r\n    \r\n    if (!submit) {\r\n        form.setAttribute(\"data-submitted\", \"true\");\r\n    }\r\n\r\n    var inputs = form.querySelectorAll<HTMLInputElement>(\"input, textarea, select\");\r\n\r\n    [].forEach.call(inputs, function(input: HTMLInputElement) {\r\n        if (input.type === \"hidden\") {\r\n            return;\r\n        }\r\n        if (!submit) {\r\n            addChangeListener(input);\r\n        }\r\n        const current = validateElement(input);\r\n        valid = valid && current;\r\n    });\r\n    \r\n    return valid;\r\n}\r\n\r\nform_validators.push(requiredValidator);\r\nform_validators.push(lengthValidator);\r\nform_validators.push(regexValidator);\r\nform_validators.push(rangeValidator);\r\n\r\nfunction executeHandlers(evt: Event, succeeded: boolean) {\r\n    for (let handler of form_validation_handlers) {\r\n        handler(evt, succeeded);\r\n    }\r\n}\r\n\r\nwindow.addEventListener('DOMContentLoaded', function() {\r\n    var elements = document.querySelectorAll<HTMLFormElement>('form');\r\n\r\n    [].forEach.call(elements, function(form: HTMLFormElement) {\r\n        form.addEventListener(\"submit\", function(ev) {\r\n            if (!validateForm(form)) {\r\n                executeHandlers(ev, false);\r\n                ev.preventDefault();\r\n                return;\r\n            }\r\n\r\n            executeHandlers(ev, true);\r\n        });\r\n    });\r\n});"],"names":["form_validation_handlers","form_validators","getElementValue","element","value","findContainer","document","querySelector","getAttribute","clearError","container","firstChild","child","parent_1","parentNode","removeChild","classList","add","validateElement","success","form_validators_1","_i","validator","showError","message","textContent","validateForm","form","valid","submit","setAttribute","inputs","querySelectorAll","forEach","call","input","type","nodeName","input_1","addEventListener","select_1","addChangeListener","current","executeHandlers","evt","succeeded","form_validation_handlers_1","handler","push","trim","errorMsg","minlen","maxlen","max","parseInt","length","min","regexPattern","match","minval","maxval","isNaN","Number","isInteger","parseFloat","isInt","number","window","elements","ev","preventDefault"],"mappings":"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"}